<?php

namespace app\models\work;

use app\models\common\ForeignEventParticipants;
use app\models\common\SendMethod;
use app\models\common\TrainingGroup;
use app\models\common\TrainingGroupParticipant;
use Yii;


class TrainingGroupParticipantWork extends TrainingGroupParticipant
{
    public $participant_name;
    public $pd = [];

    public function rules()
    {
        return [
            [['training_group_id'], 'required'],
            [['participant_id', 'send_method_id', 'training_group_id', 'status'], 'integer'],
            [['certificat_number', 'participant_name'], 'string'],
            [['pd'], 'safe'],
            [['participant_id'], 'exist', 'skipOnError' => true, 'targetClass' => ForeignEventParticipants::className(), 'targetAttribute' => ['participant_id' => 'id']],
            [['send_method_id'], 'exist', 'skipOnError' => true, 'targetClass' => SendMethod::className(), 'targetAttribute' => ['send_method_id' => 'id']],
            [['training_group_id'], 'exist', 'skipOnError' => true, 'targetClass' => TrainingGroup::className(), 'targetAttribute' => ['training_group_id' => 'id']],
        ];
    }

    public function getParticipantWork()
    {
        return $this->hasOne(ForeignEventParticipantsWork::className(), ['id' => 'participant_id']);
    }

    public function getTrainingGroupWork()
    {
        return $this->hasOne(TrainingGroupWork::className(), ['id' => 'training_group_id']);
    }

    public function beforeDelete()
    {
        $visits = VisitWork::find()->joinWith(['trainingGroupLesson trainingGroupLesson'])->where(['foreign_event_participant_id' => $this->participant_id])->andWhere(['trainingGroupLesson.training_group_id' => $this->training_group_id])->all();

        foreach ($visits as $visit) {
            $visit->delete();
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {

        $data = PersonalDataWork::find()->all();
        foreach ($data as $one)
        {
            $partData = PersonalDataTrainingParticipantGroupWork::find()->where(['training_group_participant_id' => $this->id])->andWhere(['personal_data_id' => $one->id])->one();
            if ($partData === null)
            {
                $partData = new PersonalDataTrainingParticipantGroupWork();
                $partData->training_group_participant_id = $this->id;
                $partData->personal_data_id = $one->id;
            }
            if (array_search($one->id, $this->pd) !== false)
                $partData->status = 1;
            else
                $partData->status = 0;
            $partData->save();
        }
    }
}
