<?php

namespace app\models\common;

use app\models\work\PeopleWork;
use Mpdf\Tag\P;
use Yii;
use yii\helpers\Html;

/**
 * This is the model class for table "people_material_object".
 *
 * @property int $id
 * @property int $people_id
 * @property int $material_object_id
 * @property string $acceptance_date
 *
 * @property MaterialObject $materialObject
 * @property People $people
 */
class PeopleMaterialObject extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'people_material_object';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['people_id', 'material_object_id'], 'required'],
            [['people_id', 'material_object_id'], 'integer'],
            [['acceptance_date'], 'string'],
            [['material_object_id'], 'exist', 'skipOnError' => true, 'targetClass' => MaterialObject::className(), 'targetAttribute' => ['material_object_id' => 'id']],
            [['people_id'], 'exist', 'skipOnError' => true, 'targetClass' => People::className(), 'targetAttribute' => ['people_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'people_id' => 'Ответственный',
            'peopleName' => 'Ответственный',
            'material_object_id' => 'Объект',
            'materialObjectName' => 'Объект',
            'acceptance_date' => 'Дата',
            'history' => 'История',
        ];
    }

    /**
     * Gets query for [[MaterialObject]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getMaterialObject()
    {
        return $this->hasOne(MaterialObject::className(), ['id' => 'material_object_id']);
    }

    /**
     * Gets query for [[People]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getPeople()
    {
        return $this->hasOne(People::className(), ['id' => 'people_id']);
    }

    public function getPeopleName()
    {
        $people = People::find()->where(['id' => $this->people_id])->one();
        return Html::a($people->fullName, \yii\helpers\Url::to(['people/view', 'id' => $people->id]));
    }

    public function getMaterialObjectName()
    {
        $obj = MaterialObject::find()->where(['id' => $this->material_object_id])->one();
        return Html::a($obj->name, \yii\helpers\Url::to(['material-object/view', 'id' => $obj->id]));
    }

    public function getHistory()
    {
        $history = LegacyMaterialResponsibility::find()->where(['material_object_id' => $this->material_object_id])->orderBy(['date' => SORT_ASC])->all();
        foreach ($history as $historyOne)
        {
            $result .= Html::a($historyOne->peopleOut->shortName, \yii\helpers\Url::to(['people/view', 'id' => $historyOne->people_out_id])).' &#10148; '.Html::a($historyOne->peopleIn->shortName, \yii\helpers\Url::to(['people/view', 'id' => $historyOne->people_in_id])).' '.$historyOne->date.'<br>';
        }
        return $result;
    }

    public function getPeopleWork()
    {
        return $this->hasOne(PeopleWork::className(), ['id' => 'people_id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        if ($changedAttributes["people_id"] != $this->people_id)
        {
            /*
             * Здесь генерация документа о передаче ответственности
             * От человека $changedAttributes["people_id"]
             * К человеку $this->people_id
             */

            $legacy = new LegacyMaterialResponsibility();
            $legacy->people_out_id = $changedAttributes["people_id"];
            $legacy->people_in_id = $this->people_id;
            $legacy->material_object_id = $this->material_object_id;
            $legacy->date = $this->acceptance_date;
            $legacy->save();
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
