<?php

namespace app\models\common;

use app\models\components\FileWizard;
use Yii;

/**
 * This is the model class for table "training_program".
 *
 * @property int $id
 * @property string $name
 * @property string|null $ped_council_date
 * @property string|null $ped_council_number
 * @property int $author_id
 * @property int $capacity
 * @property int $student_left_age
 * @property int $student_right_age
 * @property int $focus_id
 * @property int $allow_remote
 * @property string|null $doc_file
 * @property string|null $edit_docs
 * @property string|null $key_words
 *
 * @property BranchProgram[] $branchPrograms
 * @property People $author
 */
class TrainingProgram extends \yii\db\ActiveRecord
{
    public $isTechnopark;
    public $isQuantorium;
    public $isCDNTT;


    public $docFile;
    public $editDocs;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'training_program';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'author_id', 'focus'], 'required'],
            [['ped_council_date'], 'safe'],
            [['focus_id', 'author_id', 'capacity', 'student_left_age', 'student_right_age', 'allow_remote', 'isCDNTT', 'isQuantorium', 'isTechnopark'], 'integer'],
            [['name', 'ped_council_number', 'doc_file', 'edit_docs', 'key_words'], 'string', 'max' => 1000],
            [['author_id'], 'exist', 'skipOnError' => true, 'targetClass' => People::className(), 'targetAttribute' => ['author_id' => 'id']],
            [['docFile'], 'file', 'extensions' => 'jpg, png, pdf, doc, docx, zip, rar, 7z, tag', 'skipOnEmpty' => true],
            [['editDocs'], 'file', 'extensions' => 'jpg, png, pdf, doc, docx, zip, rar, 7z, tag', 'skipOnEmpty' => true, 'maxFiles' => 10],

        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название',
            'ped_council_date' => 'Дата педагогического совета',
            'ped_council_number' => 'Номер протокола педагогического совета',
            'author_id' => 'Составитель',
            'authorName' => 'Составитель',
            'capacity' => 'Объем, ак. час.',
            'student_left_age' => 'Мин. возраст учащихся, лет',
            'student_right_age' => 'Макс. возраст учащихся, лет',
            'studentAge' => 'Возраст учащихся, лет',
            'focus_id' => 'Направленность',
            'stringFocus' => 'Направленность',
            'allow_remote' => 'С применением дистанционных технологий',
            'doc_file' => 'Документ программы',
            'docFile' => 'Документ программы',
            'edit_docs' => 'Редактируемые документы',
            'editDocs' => 'Редактируемые документы',
            'key_words' => 'Ключевые слова',
            'isCDNTT' => 'ЦДНТТ',
            'isQuantorium' => 'Кванториум',
            'isTechnopark' => 'Технопарк',
            'branchs' => 'Отдел(-ы) - место реализации'
        ];
    }

    /**
     * Gets query for [[BranchPrograms]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getBranchPrograms()
    {
        return $this->hasMany(BranchProgram::className(), ['training_program_id' => 'id']);
    }

    /**
     * Gets query for [[Author]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getAuthor()
    {
        return $this->hasOne(People::className(), ['id' => 'author_id']);
    }

    public function getFocus()
    {
        return $this->hasOne(Focus::className(), ['id' => 'author_id']);
    }

    public function getAuthorName()
    {
        return $this->author->shortName;
    }

    public function getStudentAge()
    {
        return $this->student_left_age.' - '.$this->student_right_age.' л.';
    }

    public function getAllowRemote()
    {
        return $this->allow_remote == 0 ? 'Нет' : 'Да';
    }

    public function getBranchs()
    {
        $branchs = BranchProgram::find()->where(['training_program_id' => $this->id])->all();
        $result = '';
        foreach ($branchs as $branch)
        {
            $result .= $branch->branch->name.'<br>';
        }
        return $result;
    }

    public function getStringFocus()
    {
        return Focus::find()->where(['id' => $this->focus_id])->one()->name;
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        $edT = new BranchProgram();
        if ($this->isTechnopark == 1)
        {
            $edT->branch_id = 2;
            $edT->training_program_id = $this->id;
            if (count(BranchProgram::find()->where(['branch_id' => 2])->andWhere(['training_program_id' => $this->id])->all()) == 0)
                $edT->save();
        }
        else
        {
            $edT = BranchProgram::find()->where(['branch_id' => 2])->andWhere(['training_program_id' => $this->id])->one();
            if ($edT !== null)
                $edT->delete();
        }

        $edQ = new BranchProgram();
        if ($this->isQuantorium == 1)
        {
            $edQ->branch_id = 1;
            $edQ->training_program_id = $this->id;
            if (count(BranchProgram::find()->where(['branch_id' => 1])->andWhere(['training_program_id' => $this->id])->all()) == 0)
                $edQ->save();
        }
        else
        {
            $edQ = BranchProgram::find()->where(['branch_id' => 1])->andWhere(['training_program_id' => $this->id])->one();
            if ($edQ !== null)
                $edQ->delete();
        }

        $edC = new BranchProgram();
        if ($this->isCDNTT == 1)
        {
            $edC->branch_id = 3;
            $edC->training_program_id = $this->id;
            if (count(BranchProgram::find()->where(['branch_id' => 3])->andWhere(['training_program_id' => $this->id])->all()) == 0)
                $edC->save();
        }
        else
        {
            $edC = BranchProgram::find()->where(['branch_id' => 3])->andWhere(['training_program_id' => $this->id])->one();
            if ($edC !== null)
                $edC->delete();
        }
    }

    public function uploadEditFiles($upd = null)
    {
        $path = '@app/upload/files/program/edit_docs/';
        $result = '';
        $counter = 0;
        if (strlen($this->edit_docs) > 3)
            $counter = count(explode(" ", $this->edit_docs)) - 1;
        foreach ($this->editDocs as $file) {
            $counter++;
            $date = $this->ped_council_date;
            $new_date = '';
            for ($i = 0; $i < strlen($date); ++$i)
                if ($date[$i] != '-')
                    $new_date = $new_date.$date[$i];
            $filename = '';
            $filename = 'Ред'.$counter.'_'.$new_date.'_'.$this->name;
            $res = mb_ereg_replace('[ ]{1,}', '_', $filename);
            $res = FileWizard::CutFilename($res);
            $res = mb_ereg_replace('[^а-яА-Я0-9a-zA-Z._]{1}', '', $res);
            $file->saveAs($path . $res . '.' . $file->extension);
            $result = $result.$res . '.' . $file->extension.' ';
        }
        if ($upd == null)
            $this->edit_docs = $result;
        else
            $this->edit_docs = $this->edit_docs.$result;
        return true;
    }

    public function uploadDocFile()
    {
        $path = '@app/upload/files/program/doc/';
        $date = $this->ped_council_date;
        $new_date = '';
        $filename = '';
        for ($i = 0; $i < strlen($date); ++$i)
            if ($date[$i] != '-')
                $new_date = $new_date.$date[$i];
        $filename = 'Док.'.$new_date.'_'.$this->name;
        $res = mb_ereg_replace('[ ]{1,}', '_', $filename);
        $res = mb_ereg_replace('[^а-яА-Яa-zA-Z0-9._]{1}', '', $res);
        $res = FileWizard::CutFilename($res);
        $this->doc_file = $res.'.'.$this->docFile->extension;
        $this->docFile->saveAs( $path.$res.'.'.$this->docFile->extension);
    }
}
