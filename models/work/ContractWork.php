<?php

namespace app\models\work;

use app\models\common\Contract;
use Yii;
use yii\helpers\Html;
use app\models\components\FileWizard;


class ContractWork extends Contract
{
    public $scanFile;
    public $category;

    public function rules()
    {
        return [
            [['scanFile'], 'file', 'extensions' => 'png, jpg, pdf, zip, rar, 7z, tag', 'skipOnEmpty' => true],
            [['date', 'category'], 'safe'],
            [['number'], 'string', 'max' => 100],
            [['file', 'key_words'], 'string', 'max' => 1000],
        ];
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'date' => 'Дата договора',
            'number' => 'Номер договора',
            'file' => 'Скан договора',
            'key_words' => 'Ключевые слова',
            'categoryString' => 'Категории мат. объектов в договоре',
        ];
    }

    public function getContractCategoryContractsWork()
    {
        return $this->hasMany(ContractCategoryContractWork::className(), ['contract_id' => 'id']);
    }

    public function getFileLink()
    {
        return Html::a($this->file, \yii\helpers\Url::to(['contract/get-file', 'fileName' => $this->file, 'modelId' => $this->id, 'type' => null]));
    }

    public function uploadFile()
    {
        $path = '@app/upload/files/contract/';
        $filename = '';
        $filename = 'Договор_'.$this->number.'_'.$this->date.'_'.$this->id;
        $res = mb_ereg_replace('[ ]{1,}', '_', $filename);
        $res = mb_ereg_replace('[^а-яА-Я0-9._]{1}', '', $res);
        $res = FileWizard::CutFilename($res);
        $this->file = $res.'.'.$this->scanFile->extension;
        $this->scanFile->saveAs( $path.$res.'.'.$this->scanFile->extension);
    }

    public function getCategoryString()
    {
        $cat = ContractCategoryContractWork::find()->where(['contract_id' => $this->id])->all();
        $res = '';
        foreach ($cat as $one)
        {
            $res .= $one->categoryContract->name.'<br>';
        }
        return $res;
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        if ($this->category !== null && $this->category !== "") {
            foreach ($this->category as $cat_one) {
                $ccc = ContractCategoryContractWork::find()->where(['contract_id' => $this->id])->andWhere(['category_contract_id' => $cat_one])->one();
                if ($ccc == null) $ccc = new ContractCategoryContractWork();
                $ccc->contract_id = $this->id;
                $ccc->category_contract_id = $cat_one;
                $ccc->save();
            }
        }
    }
}
