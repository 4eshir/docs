<?php

namespace app\models\work;

use app\models\common\Branch;
use app\models\common\ForeignEvent;
use app\models\common\ForeignEventParticipants;
use app\models\common\ParticipantFiles;
use app\models\common\People;
use app\models\common\TeacherParticipant;
use app\models\common\Team;
use app\models\components\FileWizard;
use Yii;

use lhs\Yii2SaveRelationsBehavior\SaveRelationsBehavior;


class TeacherParticipantWork extends TeacherParticipant
{
    public $team;
    public $file;
    public $fileString;

    public $branchs;

    public function rules()
    {
        return [
            [['participant_id', 'teacher_id', 'foreign_event_id'], 'required'],
            [['participant_id', 'teacher_id', 'teacher2_id', 'foreign_event_id', 'allow_remote_id'], 'integer'],
            [['focus', 'team'], 'string'],
            [['foreign_event_id'], 'exist', 'skipOnError' => true, 'targetClass' => ForeignEvent::className(), 'targetAttribute' => ['foreign_event_id' => 'id']],
            [['participant_id'], 'exist', 'skipOnError' => true, 'targetClass' => ForeignEventParticipants::className(), 'targetAttribute' => ['participant_id' => 'id']],
            [['teacher_id'], 'exist', 'skipOnError' => true, 'targetClass' => People::className(), 'targetAttribute' => ['teacher_id' => 'id']],
            [['file'], 'file', 'extensions' => 'jpg, png, pdf, doc, docx, zip, rar, 7z, tag', 'skipOnEmpty' => true],
            ['branchs', 'safe'],
        ];
    }

    /**
 * @inheritdoc
 */
    public function behaviors()
    {
        return [
            'saveRelations' => [
                'class' => 'lhs\Yii2SaveRelationsBehavior\SaveRelationsBehavior',
                'relations' => [
                    'teacherParticipantBranches',
                ],
            ],
        ];
    }

    public function getTeacherParticipantBranches()
    {
        return $this->hasMany(TeacherParticipantBranchWork::className(), ['teacher_participant_id' => 'id']);
    }


    public function getBranchs()
    {
        $funcs = TeacherParticipantBranchWork::find()->where(['teacher_participant_id' => $this->id])->all();
        $result = [];
        foreach ($funcs as $func)
            $result[] = $func->branch_id;

        return $result;
    }

    public function getParticipantWork()
    {
        return $this->hasOne(ForeignEventParticipantsWork::className(), ['id' => 'participant_id']);
    }

    public function getTeacherWork()
    {
        return $this->hasOne(PeopleWork::className(), ['id' => 'teacher_id']);
    }

    public function getTeacher2Work()
    {
        return $this->hasOne(PeopleWork::className(), ['id' => 'teacher2_id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        $this->checkTeam();
        $funcs = TeacherParticipantBranchWork::find()->where(['teacher_participant_id' => $this->id])->all();
        foreach ($funcs as $func)
            $func->delete();

        if($this->branchs !== '' && $this->branchs !== null)
            foreach ($this->branchs as $branch)
            {
                $func = TeacherParticipantBranchWork::find()->where(['teacher_participant_id' => $this->id])->andWhere(['branch_id' => $branch])->one();
                if ($func == null) $func = new TeacherParticipantBranchWork();
                $func->teacher_participant_id = $this->id;
                $func->branch_id = $branch;
                $func->save();
            }
    }

    public function getTeam()
    {
        $team = TeamWork::find()->where(['participant_id' => $this->participant_id])->andWhere(['foreign_event_id' => $this->foreign_event_id])->one();
        $this->team = $team === null ? '' : $team->name;
    }

    public function checkTeam()
    {
        $team = TeamWork::find()->where(['participant_id' => $this->participant_id])->andWhere(['foreign_event_id' => $this->foreign_event_id])->one();

        if ($team === null)
            if ($this->team !== "" && $this->team !== null)
                $team = new Team();
            else
                return;
        $team->foreign_event_id = $this->foreign_event_id;
        $team->participant_id = $this->participant_id;
        $team->name = $this->team;
        $team->save();
    }

    public function uploadParticipantFiles()
    {
        $path = '@app/upload/files/foreign-event/participants/';
        $date = $this->foreignEvent->start_date;
        $new_date = '';
        $filename = '';
        for ($i = 0; $i < strlen($date); ++$i)
            if ($date[$i] != '-')
                $new_date = $new_date.$date[$i];
        $participant = ForeignEventParticipants::find()->where(['id' => $this->participant_id])->one();
        $filename = $participant->secondname.'_'.$new_date.'_'.$this->foreignEvent->name;
        $res = mb_ereg_replace('[ ]{1,}', '_', $filename);
        $res = mb_ereg_replace('[^a-zA-Zа-яА-Я0-9._]{1}', '', $res);
        $res = FileWizard::CutFilename($res);
        $this->fileString = $res.'.'.$this->file->extension;
        $this->file->saveAs( $path.$this->fileString);

        $partFile = ParticipantFilesWork::find()->where(['foreign_event_id' => $this->foreign_event_id])->andWhere(['participant_id' => $this->participant_id])->one();
        if ($partFile === null) $partFile = new ParticipantFilesWork();
        $partFile->foreign_event_id = $this->foreign_event_id;
        $partFile->participant_id = $this->participant_id;
        $partFile->filename = $this->fileString;
        $partFile->save();
    }


    public function beforeSave($insert)
    {
        if ($this->allow_remote_id === null) $this->allow_remote_id = 1;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
