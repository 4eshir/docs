<?php

namespace app\models\common;

use app\models\components\FileWizard;
use Yii;

/**
 * This is the model class for table "teacher_participant".
 *
 * @property int $id
 * @property int $participant_id
 * @property int $teacher_id
 * @property int $foreign_event_id
 * @property int $branch_id
 * @property string $focus
 *
 * @property ForeignEvent $foreignEvent
 * @property Branch $branch
 * @property ForeignEventParticipants $participant
 * @property People $teacher
 */
class TeacherParticipant extends \yii\db\ActiveRecord
{
    public $team;
    public $file;
    public $fileString;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'teacher_participant';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['participant_id', 'teacher_id', 'foreign_event_id', 'branch_id'], 'required'],
            [['participant_id', 'teacher_id', 'foreign_event_id', 'branch_id'], 'integer'],
            [['focus', 'team'], 'string'],
            [['foreign_event_id'], 'exist', 'skipOnError' => true, 'targetClass' => ForeignEvent::className(), 'targetAttribute' => ['foreign_event_id' => 'id']],
            [['participant_id'], 'exist', 'skipOnError' => true, 'targetClass' => ForeignEventParticipants::className(), 'targetAttribute' => ['participant_id' => 'id']],
            [['teacher_id'], 'exist', 'skipOnError' => true, 'targetClass' => People::className(), 'targetAttribute' => ['teacher_id' => 'id']],
            [['file'], 'file', 'extensions' => 'jpg, png, pdf, doc, docx, zip, rar, 7z, tag', 'skipOnEmpty' => true],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'participant_id' => 'Участник',
            'teacher_id' => 'Педагог',
            'foreign_event_id' => 'Foreign Event ID',
            'branch_id' => 'Отдел',
        ];
    }

    /**
     * Gets query for [[ForeignEvent]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getForeignEvent()
    {
        return $this->hasOne(ForeignEvent::className(), ['id' => 'foreign_event_id']);
    }

    /**
     * Gets query for [[Participant]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getParticipant()
    {
        return $this->hasOne(ForeignEventParticipants::className(), ['id' => 'participant_id']);
    }

    /**
     * Gets query for [[Teacher]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getTeacher()
    {
        return $this->hasOne(People::className(), ['id' => 'teacher_id']);
    }

    public function getBranch()
    {
        return $this->hasOne(Branch::className(), ['id' => 'branch_id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        $this->checkTeam();
    }

    public function getTeam()
    {
        $team = Team::find()->where(['participant_id' => $this->participant_id])->andWhere(['foreign_event_id' => $this->foreign_event_id])->one();
        $this->team = $team === null ? '' : $team->name;
    }

    public function checkTeam()
    {
        $team = Team::find()->where(['participant_id' => $this->participant_id])->andWhere(['foreign_event_id' => $this->foreign_event_id])->one();
        if ($team === null)
            if ($this->team !== "")
                $team = new Team();
        $team->foreign_event_id = $this->foreign_event_id;
        $team->participant_id = $this->participant_id;
        $team->name = $this->team;
        $team->save();
    }

    public function uploadParticipantFiles()
    {
        $path = '@app/upload/files/foreign_event/participants/';
        $date = $this->foreignEvent->start_date;
        $new_date = '';
        $filename = '';
        for ($i = 0; $i < strlen($date); ++$i)
            if ($date[$i] != '-')
                $new_date = $new_date.$date[$i];
        $participant = ForeignEventParticipants::find()->where(['id' => $this->participant_id])->one();
        $filename = $participant->secondname.'_'.$new_date.'_'.$this->foreignEvent->name;
        $res = mb_ereg_replace('[ ]{1,}', '_', $filename);
        $res = mb_ereg_replace('[^a-zA-Zа-яА-Я0-9._]{1}', '', $res);
        $res = FileWizard::CutFilename($res);
        $this->fileString = $res.'.'.$this->file->extension;
        $this->file->saveAs( $path.$this->fileString);

        $partFile = ParticipantFiles::find()->where(['foreign_event_id' => $this->foreign_event_id])->andWhere(['participant_id' => $this->participant_id])->one();
        if ($partFile === null) $partFile = new ParticipantFiles();
        $partFile->foreign_event_id = $this->foreign_event_id;
        $partFile->participant_id = $this->participant_id;
        $partFile->filename = $this->fileString;
        $partFile->save();
    }
}
