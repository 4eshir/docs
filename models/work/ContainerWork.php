<?php

namespace app\models\work;

use app\models\common\Container;
use app\models\work\ContainerObjectWork;
use yii\helpers\Html;
use Yii;


class ContainerWork extends Container
{
	public $objects; //объекты для динамической формы

	public function rules()
    {
        return [
            [['name'], 'required'],
            [['container_id', 'material_object_id', 'auditorium_id'], 'integer'],
            [['name'], 'string', 'max' => 1000],
            [['container_id'], 'exist', 'skipOnError' => true, 'targetClass' => ContainerWork::className(), 'targetAttribute' => ['container_id' => 'id']],
            [['auditorium_id'], 'exist', 'skipOnError' => true, 'targetClass' => AuditoriumWork::className(), 'targetAttribute' => ['auditorium_id' => 'id']],
            [['material_object_id'], 'exist', 'skipOnError' => true, 'targetClass' => MaterialObjectWork::className(), 'targetAttribute' => ['material_object_id' => 'id']],
        ];
    }

	public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Наименование контейнера',
            'container_id' => 'Входит в контейнер (опционально)',
            'containerLink' => 'Входит в контейнер',
            'material_object_id' => 'Является объектом (опционально)',
            'objectLink' => 'Является объектом',
            'auditorium_id' => 'Является помещением (опционально)',
            'auditoriumLink' => 'Является помещением',
            'objectsInContainer' => 'Объекты в контейнере',
        ];
    }

    public function getContainerWork()
    {
        return $this->hasOne(ContainerWork::className(), ['id' => 'container_id']);
    }

    public function getAuditoriumWork()
    {
        return $this->hasOne(AuditoriumWork::className(), ['id' => 'auditorium_id']);
    }

    public function getMaterialObjectWork()
    {
        return $this->hasOne(MaterialObjectWork::className(), ['id' => 'material_object_id']);
    }



    public function getContainerLink()
    {
    	return Html::a($this->containerWork->name, \yii\helpers\Url::to(['container/view', 'id' => $this->container_id]));
    }

    public function getObjectLink()
    {
    	return Html::a($this->materialObjectWork->name, \yii\helpers\Url::to(['material-object/view', 'id' => $this->material_object_id]));
    }

    public function getAuditoriumLink()
    {
    	return Html::a($this->auditoriumWork->name, \yii\helpers\Url::to(['auditorium/view', 'id' => $this->auditorium_id]));
    }


    public function getObjectsInContainer()
    {
    	$result = '';
    	$objects = ContainerObjectWork::find()->where(['container_id' => $this->id])->all();
    	foreach ($objects as $object)
    	{
    		$obj = MaterialObjectWork::find()->where(['id' => $object->id])->one();
    		$result .= Html::a($object->materialObjectWork->name, \yii\helpers\Url::to(['material-object/view', 'id' => $object->material_object_id])).' ('.$object->materialObjectWork->count.' шт.)<br>';
    	}
    	return $result;
    }


    public function afterSave($insert, $changedAttributes)
    {
    	parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    	if ($this->objects !== null && $this->objects[0]->material_object_id !== '')
        {
            foreach ($this->objects as $object)
            {
                $newObject = new ContainerObjectWork();
                $newObject->container_id = $this->id;
                $newObject->material_object_id = $object->material_object_id;
                $newObject->save();
            }
        }
    }
}
