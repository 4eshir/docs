<?php

namespace app\models\work;

use app\models\common\Invoice;
use app\models\work\EntryWork;
use app\models\work\InvoiceEntryWork;
use app\models\work\CompanyWork;
use yii\helpers\Html;
use app\models\components\FileWizard;
use Yii;


class InvoiceWork extends Invoice
{
	public $objects; //записи об объектах
    public $documentFile; //документ основания

	public function rules()
    {
        return [
            [['documentFile'], 'file', 'extensions' => 'xls, xlsx, doc, docx, zip, rar, 7z, tag, pdf', 'skipOnEmpty' => true],
            [['number', 'contractor_id', 'date_product', 'date_invoice'], 'required'],
            [['contractor_id', 'type'], 'integer'],
            [['date_product', 'date_invoice'], 'safe'],
            [['number'], 'string', 'max' => 15],
            [['document'], 'string', 'max' => 1000],
            [['contractor_id'], 'exist', 'skipOnError' => true, 'targetClass' => CompanyWork::className(), 'targetAttribute' => ['contractor_id' => 'id']],
        ];
    }

    public function attributeLabels()
    {
        return [
            'number' => 'Номер документа',
            'contractor_id' => 'Контрагент',
            'contractString' => 'Контрагент',
            'date_product' => 'Дата приема товара в накладной',
            'date_invoice' => 'Дата документа',
            'type' => 'Type',
            'entries' => '',
            'documentFile' => 'Документ основания поступления',
            'documentLink' => 'Документ основания поступления',
        ];
    }

    public function getContractString()
    {
        $contractor = CompanyWork::find()->where(['id' => $this->contractor_id])->one();
        //return CompanyWork::find()->where(['id' => $this->contractor_id])->createCommand()->getRawSql();
        return Html::a($contractor->name, \yii\helpers\Url::to(['company/view', 'id' => $contractor->id]));
    }

    public function getDocumentLink()
    {
        return Html::a($this->document, \yii\helpers\Url::to(['invoice/get-file', 'fileName' => $this->document, 'modelId' => $this->id, 'type' => null]));
    }

    public function getEntries()
    {
        $entries = InvoiceEntryWork::find()->where(['invoice_id' => $this->id])->all();
        $result = '';
        foreach ($entries as $entry)
        {
            $objects = \app\models\work\ObjectEntryWork::find()->where(['entry_id' => $entry->entry_id])->orderBy(['id' => 'SORT_ASC'])->all();
            $result .= '<b>'.$objects[0]->materialObject->name.'</b> '.' ('.$objects[0]->materialObject->attribute.') - '.$entry->entry->amount.' шт.'.'<br>';

            foreach ($objects as $object)
            {
                $result .= Html::a($object->materialObject->name, \yii\helpers\Url::to(['material-object/view', 'id' => $object->materialObject->id]))./*' - '.($i - $entry->entryWork->object_id + 1).*/'<br>';
            }
            $result .= '<hr style="border-top: 1px solid gray; margin-top: 5px; margin-bottom: 5px">';
        }
        return $result;
    }

    public function uploadDocument()
    {
        $path = '@app/upload/files/invoice/document/';
        $filename = '';
        $filename = 'Нкл.'.$this->number.'_'.$this->id;
        $res = mb_ereg_replace('[ ]{1,}', '_', $filename);
        $res = mb_ereg_replace('[^а-яА-Я0-9._]{1}', '', $res);
        $res = FileWizard::CutFilename($res);
        $this->document = $res.'.'.$this->documentFile->extension;
        $this->documentFile->saveAs( $path.$res.'.'.$this->documentFile->extension);
    }

    public function afterSave($insert, $changedAttributes)
    {
    	parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

    	if ($this->objects !== null && $this->objects[0]->name != '')
    	{
            //сохраняем все объекты из динамической формы
    		foreach ($this->objects as $object)
            {
                //создаем запись для накладной
                $entry = new EntryWork();
                $entry->amount = $object->amount;
                $entry->save();

                // создаем материальные объекты и связку
                for ($i = 0; $i < $object->amount; $i++)
                {
                    $newObject = new MaterialObjectWork($object);
                    $newObject->number = $this->number;
                    $newObject->save();

                    $newObjectEntry = new ObjectEntryWork();
                    $newObjectEntry->entry_id = $entry->id;
                    $newObjectEntry->material_object_id = $newObject->id;
                    $newObjectEntry->save();
                }

                //связываем запись и накладную/акт
                $invoiceEntry = InvoiceEntryWork::find()->where(['invoice_id' => $this->id])->andWhere(['entry_id' => $entry->id])->one();
                if ($invoiceEntry == null) $invoiceEntry = new InvoiceEntryWork();
                $invoiceEntry->invoice_id = $this->id;
                $invoiceEntry->entry_id = $entry->id;
                $invoiceEntry->save();
            }


    	}
    }

}
